using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace client_csharp
{
    public class ClientSocket
    {
        private TcpClient client;
        private NetworkStream stream;
        private string serverIp;
        private int serverPort;
        private Thread receiveThread;

        // üîπ H√†m kh·ªüi t·∫°o 
        public ClientSocket(string ip, int port)
        {
            serverIp = ip;
            serverPort = port;
        }

        // üîπ H√†m k·∫øt n·ªëi t·ªõi server 
        public void ConnectToServer()
        {
            try
            {
                Console.WriteLine($"ƒêang k·∫øt n·ªëi t·ªõi server {serverIp}:{serverPort} ...");

                client = new TcpClient();
                client.Connect(serverIp, serverPort);
                stream = client.GetStream();

                Console.WriteLine("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi server!");

                // üîÑ B·∫Øt ƒë·∫ßu lu·ªìng nh·∫≠n d·ªØ li·ªáu
                StartReceiveLoop();
            }
            catch (SocketException ex)
            {
                Console.WriteLine($"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh: {ex.Message}");
            }
        }

        // üîπ B·∫Øt ƒë·∫ßu lu·ªìng nh·∫≠n d·ªØ li·ªáu t·ª´ server
        private void StartReceiveLoop()
        {
            receiveThread = new Thread(() =>
            {
                try
                {
                    while (true)
                    {
                        if (stream == null || !client.Connected) break;

                        byte[] buffer = new byte[1024];
                        int bytesRead = stream.Read(buffer, 0, buffer.Length);

                        if (bytesRead == 0)
                        {
                            Console.WriteLine("‚ö†Ô∏è Server ƒë√£ ƒë√≥ng k·∫øt n·ªëi.");
                            break;
                        }

                        string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                        Console.WriteLine($"\nüì© T·ª´ server: {message}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è L·ªói khi nh·∫≠n d·ªØ li·ªáu: {ex.Message}");
                }
            });

            receiveThread.IsBackground = true;
            receiveThread.Start();
        }

        // üîπ G·ª≠i d·ªØ li·ªáu t·ªõi server
        public void SendData(string message)
        {
            try
            {
                if (stream != null && client.Connected)
                {
                    byte[] data = Encoding.UTF8.GetBytes(message);
                    stream.Write(data, 0, data.Length);
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i: ch∆∞a k·∫øt n·ªëi ho·∫∑c ƒë√£ m·∫•t k·∫øt n·ªëi.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi g·ª≠i d·ªØ li·ªáu: {ex.Message}");
            }
        }

        // üîπ Nh·∫≠n d·ªØ li·ªáu (n·∫øu c·∫ßn ƒë·ªçc t·ª©c th√¨, kh√¥ng d√πng thread)
        public string ReceiveData()
        {
            try
            {
                byte[] buffer = new byte[1024];
                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                if (bytesRead > 0)
                {
                    return Encoding.UTF8.GetString(buffer, 0, bytesRead);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói nh·∫≠n d·ªØ li·ªáu: {ex.Message}");
            }
            return string.Empty;
        }

        // üîπ V√≤ng l·∫∑p game (console)
        public void StartGameLoop()
        {
            Console.WriteLine("üéÆ B·∫Øt ƒë·∫ßu ch∆°i. Nh·∫≠p tin nh·∫Øn ho·∫∑c n∆∞·ªõc ƒëi (vd: 0,2). G√µ 'exit' ƒë·ªÉ tho√°t.");

            while (true)
            {
                string input = Console.ReadLine();
                if (input.ToLower() == "exit")
                {
                    Disconnect();
                    break;
                }

                SendData(input);
            }
        }

        // üîπ H√†m ng·∫Øt k·∫øt n·ªëi
        public void Disconnect()
        {
            try
            {
                stream?.Close();
                client?.Close();
                Console.WriteLine("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi server.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói khi ng·∫Øt k·∫øt n·ªëi: {ex.Message}");
            }
        }
    }
}
