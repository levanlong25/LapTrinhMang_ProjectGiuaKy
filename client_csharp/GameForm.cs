using System;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace client_csharp
{
    [DebuggerDisplay($"{{{nameof(GetDebuggerDisplay)}(),nq}}")]
    public partial class GameForm : Form
    {
        private ClientSocket client;
        private Button[,] buttons = new Button[3, 3];
        private TextBox txtIp, txtPort, txtRoomId;
        private Button btnConnect, btnCreateRoom, btnJoinRoom, btnReset, btnExit;
        private Label lblStatus;

        private bool myTurn = false; // ƒê√∫ng khi t·ªõi l∆∞·ª£t m√¨nh
        private char myMark = 'X';   // K√Ω hi·ªáu c·ªßa m√¨nh ('X' ho·∫∑c 'O')

        // Constructor kh√¥ng tham s·ªë ƒë·ªÉ kh·ªüi t·∫°o t·ª´ Program.cs
        public GameForm() : this(null) { }

        public GameForm(ClientSocket clientSocket)
        {
            this.client = clientSocket;
            BuildUI();
            if (client != null)
                client.OnServerMessage += HandleServerMessage;
        }

        // ------------------ GIAO DI·ªÜN ------------------
        private void BuildUI()
        {
            this.Text = "C·ªù Caro 3x3 - Client";
            this.Size = new Size(420, 600);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormClosing += (s, e) => client?.Disconnect();

            // Nh·∫≠p IP/port
            Label lblIp = new Label() { Text = "IP server:", Location = new Point(20, 15), AutoSize = true };
            txtIp = new TextBox() { Location = new Point(90, 12), Width = 100, Text = "127.0.0.1" };
            Label lblPort = new Label() { Text = "Port:", Location = new Point(200, 15), AutoSize = true };
            txtPort = new TextBox() { Location = new Point(250, 12), Width = 60, Text = "5000" };
            btnConnect = new Button() { Text = "K·∫øt n·ªëi", Location = new Point(320, 10), Width = 70 };
            btnConnect.Click += BtnConnect_Click;

            // T·∫°o ph√≤ng / V√†o ph√≤ng
            btnCreateRoom = new Button() { Text = "T·∫°o ph√≤ng", Location = new Point(20, 50), Width = 100, Enabled = false };
            btnCreateRoom.Click += BtnCreateRoom_Click;
            txtRoomId = new TextBox() { Location = new Point(140, 52), Width = 80, PlaceholderText = "M√£ ph√≤ng" };
            btnJoinRoom = new Button() { Text = "V√†o ph√≤ng", Location = new Point(240, 50), Width = 100, Enabled = false };
            btnJoinRoom.Click += BtnJoinRoom_Click;

            // B√†n c·ªù 3x3
            int startX = 60, startY = 110, size = 80;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                {
                    buttons[i, j] = new Button();
                    buttons[i, j].SetBounds(startX + j * size, startY + i * size, size, size);
                    buttons[i, j].Font = new Font(FontFamily.GenericSansSerif, 24, FontStyle.Bold);
                    buttons[i, j].BackColor = Color.White;
                    buttons[i, j].Click += OnCellClick;
                    buttons[i, j].Enabled = false;
                    this.Controls.Add(buttons[i, j]);
                }

            // N√∫t Reset/Tho√°t
            btnReset = new Button() { Text = "Ch∆°i l·∫°i", Location = new Point(60, 390), Width = 100, Enabled = false };
            btnReset.Click += (s, e) => { ResetBoard(); client?.SendData("RESET\n"); };
            btnExit = new Button() { Text = "Tho√°t", Location = new Point(200, 390), Width = 100 };
            btnExit.Click += (s, e) => { client?.Disconnect(); this.Close(); };

            // Label tr·∫°ng th√°i
            lblStatus = new Label() { Text = "Tr·∫°ng th√°i: Ch∆∞a k·∫øt n·ªëi", Location = new Point(20, 440), AutoSize = true };

            // Th√™m control v√†o form
            this.Controls.Add(lblIp); this.Controls.Add(txtIp); this.Controls.Add(lblPort); this.Controls.Add(txtPort);
            this.Controls.Add(btnConnect); this.Controls.Add(btnCreateRoom); this.Controls.Add(txtRoomId); this.Controls.Add(btnJoinRoom);
            this.Controls.Add(btnReset); this.Controls.Add(btnExit); this.Controls.Add(lblStatus);
        }

        // ------------------ K·∫æT N·ªêI SERVER ------------------
        private void BtnConnect_Click(object sender, EventArgs e)
        {
            string ip = txtIp.Text.Trim();
            int port = int.TryParse(txtPort.Text.Trim(), out var p) ? p : 5000;
            client = new ClientSocket(ip, port);
            client.OnServerMessage += HandleServerMessage;
            client.ConnectToServer();
            lblStatus.Text = "ƒê√£ k·∫øt n·ªëi server, h√£y t·∫°o/v√†o ph√≤ng.";
            btnCreateRoom.Enabled = true;
            btnJoinRoom.Enabled = true;
        }

        // ------------------ T·∫†O PH√íNG ------------------
        private void BtnCreateRoom_Click(object sender, EventArgs e)
        {
            if (client == null) { MessageBox.Show("Ch∆∞a k·∫øt n·ªëi server!"); return; }
            client.SendData("CREATE_ROOM\n");
        }

        // ------------------ V√ÄO PH√íNG ------------------
        private void BtnJoinRoom_Click(object sender, EventArgs e)
        {
            if (client == null) { MessageBox.Show("Ch∆∞a k·∫øt n·ªëi server!"); return; }
            string roomId = txtRoomId.Text.Trim();
            if (string.IsNullOrEmpty(roomId)) { MessageBox.Show("Nh·∫≠p m√£ ph√≤ng!"); return; }
            client.SendData($"JOIN_ROOM {roomId}\n");
        }

        // ------------------ ƒê√ÅNH C·ªú ------------------
        private void OnCellClick(object sender, EventArgs e)
        {
            if (!myTurn) { MessageBox.Show("‚è≥ Ch∆∞a t·ªõi l∆∞·ª£t c·ªßa b·∫°n!"); return; }
            Button btn = sender as Button;
            if (btn == null || btn.Text != "") return;
            int row = -1, col = -1;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    if (buttons[i, j] == btn) { row = i; col = j; break; }
            btn.Text = myMark.ToString();
            btn.Enabled = false;
            myTurn = false;
            client.SendData($"MOVE {row} {col}\n");
            lblStatus.Text = "ƒê√£ ƒë√°nh n∆∞·ªõc ƒëi, ch·ªù ƒë·ªëi th·ªß...";
        }

        // ------------------ X·ª¨ L√ù D·ªÆ LI·ªÜU SERVER ------------------
        private void HandleServerMessage(string message)
        {
            if (this.InvokeRequired) { this.Invoke(new Action(() => HandleServerMessage(message))); return; }
            if (string.IsNullOrWhiteSpace(message)) return;

            if (message.StartsWith("ROOM_CREATED"))
            {
                var parts = message.Split(' ');
                if (parts.Length > 1)
                {
                    txtRoomId.Text = parts[1];
                    lblStatus.Text = $"ƒê√£ t·∫°o ph√≤ng: {parts[1]}";
                }
            }
            else if (message.StartsWith("JOINED_OK"))
            {
                lblStatus.Text = "ƒê√£ v√†o ph√≤ng, ƒë·ª£i ƒë·ªëi th·ªß...";
            }
            else if (message.StartsWith("GAME_START"))
            {
                // GAME_START X ho·∫∑c GAME_START O
                if (message.Trim().EndsWith("X")) { myMark = 'X'; }
                else if (message.Trim().EndsWith("O")) { myMark = 'O'; }
                else myMark = '?';
                lblStatus.Text = $"Game b·∫Øt ƒë·∫ßu! B·∫°n l√† {myMark}.";
                ResetBoard();
                myTurn = false; // M·∫∑c ƒë·ªãnh ch∆∞a ƒë∆∞·ª£c ƒëi, ch·ªâ khi nh·∫≠n YOUR_TURN m·ªõi cho ƒëi
                UpdateBoardEnable();
            }
            else if (message.StartsWith("UPDATE_BOARD"))
            {
                var parts = message.Split(' ');
                if (parts.Length == 4 &&
                    int.TryParse(parts[1], out int x) &&
                    int.TryParse(parts[2], out int y))
                {
                    string ch = parts[3];
                    buttons[x, y].Text = ch;
                    buttons[x, y].Enabled = false;
                }
            }
            else if (message.Contains("YOUR_TURN"))
            {
                myTurn = true;
                UpdateBoardEnable();
                lblStatus.Text = "üéØ ƒê·∫øn l∆∞·ª£t b·∫°n!";
            }
            else if (message.StartsWith("GAME_OVER"))
            {
                if (message.Contains("WINNER"))
                {
                    char winner = message[message.Length - 1];
                    if (winner == myMark) lblStatus.Text = "üéâ B·∫°n ƒë√£ th·∫Øng!";
                    else lblStatus.Text = $"Ng∆∞·ªùi th·∫Øng: {winner}";
                }
                else if (message.Contains("DRAW"))
                {
                    lblStatus.Text = "ü§ù Hai b√™n ho√†!";
                }
                myTurn = false;
                UpdateBoardEnable();
            }
            else if (message.Contains("OPPONENT_LEFT"))
            {
                lblStatus.Text = "‚ö†Ô∏è ƒê·ªëi th·ªß ƒë√£ tho√°t!";
                myTurn = false;
                UpdateBoardEnable();
            }
            else if (message.StartsWith("RESET"))
            {
                ResetBoard();
                lblStatus.Text = "B√†n c·ªù ƒë√£ reset.";
            }
            else
            {
                lblStatus.Text = message;
            }
        }

        private void UpdateBoardEnable()
        {
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    buttons[i, j].Enabled = (buttons[i, j].Text == "" && myTurn);
        }

        private void ResetBoard()
        {
            foreach (Button btn in buttons)
            {
                btn.Text = "";
                btn.BackColor = Color.White;
                btn.Enabled = false;
            }
            btnReset.Enabled = true;
            myTurn = false;
        }

        private string GetDebuggerDisplay()
        {
            return ToString();
        }
    }
}